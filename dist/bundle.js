!function(e){var n=window.webpackHotUpdate;window.webpackHotUpdate=function(e,r){!function(e,n){if(!x[e]||!y[e])return;for(var r in y[e]=!1,n)Object.prototype.hasOwnProperty.call(n,r)&&(h[r]=n[r]);0==--m&&0===b&&M()}(e,r),n&&n(e,r)};var r,t=!0,o="2b1c6070d9916a25388b",i=1e4,a={},c=[],d=[];function s(e){var n=C[e];if(!n)return j;var t=function(t){return n.hot.active?(C[t]?-1===C[t].parents.indexOf(e)&&C[t].parents.push(e):(c=[e],r=t),-1===n.children.indexOf(t)&&n.children.push(t)):(console.warn("[HMR] unexpected require("+t+") from disposed module "+e),c=[]),j(t)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return j[e]},set:function(n){j[e]=n}}};for(var i in j)Object.prototype.hasOwnProperty.call(j,i)&&"e"!==i&&"t"!==i&&Object.defineProperty(t,i,o(i));return t.e=function(e){return"ready"===u&&p("prepare"),b++,j.e(e).then(n,function(e){throw n(),e});function n(){b--,"prepare"===u&&(g[e]||k(e),0===b&&0===m&&M())}},t.t=function(e,n){return 1&n&&(e=t(e)),j.t(e,-2&n)},t}var l=[],u="idle";function p(e){u=e;for(var n=0;n<l.length;n++)l[n].call(null,e)}var f,h,v,m=0,b=0,g={},y={},x={};function w(e){return+e+""===e?+e:e}function E(e){if("idle"!==u)throw new Error("check() is only allowed in idle status");return t=e,p("check"),(n=i,n=n||1e4,new Promise(function(e,r){if("undefined"==typeof XMLHttpRequest)return r(new Error("No browser support"));try{var t=new XMLHttpRequest,i=j.p+""+o+".hot-update.json";t.open("GET",i,!0),t.timeout=n,t.send(null)}catch(e){return r(e)}t.onreadystatechange=function(){if(4===t.readyState)if(0===t.status)r(new Error("Manifest request to "+i+" timed out."));else if(404===t.status)e();else if(200!==t.status&&304!==t.status)r(new Error("Manifest request to "+i+" failed."));else{try{var n=JSON.parse(t.responseText)}catch(e){return void r(e)}e(n)}}})).then(function(e){if(!e)return p("idle"),null;y={},g={},x=e.c,v=e.h,p("prepare");var n=new Promise(function(e,n){f={resolve:e,reject:n}});h={};return k(0),"prepare"===u&&0===b&&0===m&&M(),n});var n}function k(e){x[e]?(y[e]=!0,m++,function(e){var n=document.getElementsByTagName("head")[0],r=document.createElement("script");r.charset="utf-8",r.src=j.p+""+e+"."+o+".hot-update.js",n.appendChild(r)}(e)):g[e]=!0}function M(){p("ready");var e=f;if(f=null,e)if(t)Promise.resolve().then(function(){return O(t)}).then(function(n){e.resolve(n)},function(n){e.reject(n)});else{var n=[];for(var r in h)Object.prototype.hasOwnProperty.call(h,r)&&n.push(w(r));e.resolve(n)}}function O(n){if("ready"!==u)throw new Error("apply() is only allowed in ready status");var r,t,i,d,s;function l(e){for(var n=[e],r={},t=n.slice().map(function(e){return{chain:[e],id:e}});t.length>0;){var o=t.pop(),i=o.id,a=o.chain;if((d=C[i])&&!d.hot._selfAccepted){if(d.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:i};if(d.hot._main)return{type:"unaccepted",chain:a,moduleId:i};for(var c=0;c<d.parents.length;c++){var s=d.parents[c],l=C[s];if(l){if(l.hot._declinedDependencies[i])return{type:"declined",chain:a.concat([s]),moduleId:i,parentId:s};-1===n.indexOf(s)&&(l.hot._acceptedDependencies[i]?(r[s]||(r[s]=[]),f(r[s],[i])):(delete r[s],n.push(s),t.push({chain:a.concat([s]),id:s})))}}}}return{type:"accepted",moduleId:e,outdatedModules:n,outdatedDependencies:r}}function f(e,n){for(var r=0;r<n.length;r++){var t=n[r];-1===e.indexOf(t)&&e.push(t)}}n=n||{};var m={},b=[],g={},y=function(){console.warn("[HMR] unexpected require("+k.moduleId+") to disposed module")};for(var E in h)if(Object.prototype.hasOwnProperty.call(h,E)){var k;s=w(E);var M=!1,O=!1,L=!1,N="";switch((k=h[E]?l(s):{type:"disposed",moduleId:E}).chain&&(N="\nUpdate propagation: "+k.chain.join(" -> ")),k.type){case"self-declined":n.onDeclined&&n.onDeclined(k),n.ignoreDeclined||(M=new Error("Aborted because of self decline: "+k.moduleId+N));break;case"declined":n.onDeclined&&n.onDeclined(k),n.ignoreDeclined||(M=new Error("Aborted because of declined dependency: "+k.moduleId+" in "+k.parentId+N));break;case"unaccepted":n.onUnaccepted&&n.onUnaccepted(k),n.ignoreUnaccepted||(M=new Error("Aborted because "+s+" is not accepted"+N));break;case"accepted":n.onAccepted&&n.onAccepted(k),O=!0;break;case"disposed":n.onDisposed&&n.onDisposed(k),L=!0;break;default:throw new Error("Unexception type "+k.type)}if(M)return p("abort"),Promise.reject(M);if(O)for(s in g[s]=h[s],f(b,k.outdatedModules),k.outdatedDependencies)Object.prototype.hasOwnProperty.call(k.outdatedDependencies,s)&&(m[s]||(m[s]=[]),f(m[s],k.outdatedDependencies[s]));L&&(f(b,[k.moduleId]),g[s]=y)}var H,T=[];for(t=0;t<b.length;t++)s=b[t],C[s]&&C[s].hot._selfAccepted&&T.push({module:s,errorHandler:C[s].hot._selfAccepted});p("dispose"),Object.keys(x).forEach(function(e){!1===x[e]&&function(e){delete installedChunks[e]}(e)});for(var S,_,I=b.slice();I.length>0;)if(s=I.pop(),d=C[s]){var D={},A=d.hot._disposeHandlers;for(i=0;i<A.length;i++)(r=A[i])(D);for(a[s]=D,d.hot.active=!1,delete C[s],delete m[s],i=0;i<d.children.length;i++){var U=C[d.children[i]];U&&((H=U.parents.indexOf(s))>=0&&U.parents.splice(H,1))}}for(s in m)if(Object.prototype.hasOwnProperty.call(m,s)&&(d=C[s]))for(_=m[s],i=0;i<_.length;i++)S=_[i],(H=d.children.indexOf(S))>=0&&d.children.splice(H,1);for(s in p("apply"),o=v,g)Object.prototype.hasOwnProperty.call(g,s)&&(e[s]=g[s]);var R=null;for(s in m)if(Object.prototype.hasOwnProperty.call(m,s)&&(d=C[s])){_=m[s];var q=[];for(t=0;t<_.length;t++)if(S=_[t],r=d.hot._acceptedDependencies[S]){if(-1!==q.indexOf(r))continue;q.push(r)}for(t=0;t<q.length;t++){r=q[t];try{r(_)}catch(e){n.onErrored&&n.onErrored({type:"accept-errored",moduleId:s,dependencyId:_[t],error:e}),n.ignoreErrored||R||(R=e)}}}for(t=0;t<T.length;t++){var P=T[t];s=P.module,c=[s];try{j(s)}catch(e){if("function"==typeof P.errorHandler)try{P.errorHandler(e)}catch(r){n.onErrored&&n.onErrored({type:"self-accept-error-handler-errored",moduleId:s,error:r,originalError:e}),n.ignoreErrored||R||(R=r),R||(R=e)}else n.onErrored&&n.onErrored({type:"self-accept-errored",moduleId:s,error:e}),n.ignoreErrored||R||(R=e)}}return R?(p("fail"),Promise.reject(R)):(p("idle"),new Promise(function(e){e(b)}))}var C={};function j(n){if(C[n])return C[n].exports;var t=C[n]={i:n,l:!1,exports:{},hot:function(e){var n={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:r!==e,active:!0,accept:function(e,r){if(void 0===e)n._selfAccepted=!0;else if("function"==typeof e)n._selfAccepted=e;else if("object"==typeof e)for(var t=0;t<e.length;t++)n._acceptedDependencies[e[t]]=r||function(){};else n._acceptedDependencies[e]=r||function(){}},decline:function(e){if(void 0===e)n._selfDeclined=!0;else if("object"==typeof e)for(var r=0;r<e.length;r++)n._declinedDependencies[e[r]]=!0;else n._declinedDependencies[e]=!0},dispose:function(e){n._disposeHandlers.push(e)},addDisposeHandler:function(e){n._disposeHandlers.push(e)},removeDisposeHandler:function(e){var r=n._disposeHandlers.indexOf(e);r>=0&&n._disposeHandlers.splice(r,1)},check:E,apply:O,status:function(e){if(!e)return u;l.push(e)},addStatusHandler:function(e){l.push(e)},removeStatusHandler:function(e){var n=l.indexOf(e);n>=0&&l.splice(n,1)},data:a[e]};return r=void 0,n}(n),parents:(d=c,c=[],d),children:[]};return e[n].call(t.exports,t,t.exports,s(n)),t.l=!0,t.exports}j.m=e,j.c=C,j.d=function(e,n,r){j.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},j.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},j.t=function(e,n){if(1&n&&(e=j(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(j.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var t in e)j.d(r,t,function(n){return e[n]}.bind(null,t));return r},j.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return j.d(n,"a",n),n},j.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},j.p="",j.h=function(){return o},s(7)(j.s=7)}([function(e,n,r){var t=r(3);(e.exports=r(4)(!1)).push([e.i,"#categoria{\r\n    display:grid;\r\n    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\r\n    grid-column-gap: 30px;\r\n    justify-content: center\r\n}\r\n\r\ndiv.capa{\r\n    width: 100px;\r\n    height: 150px;\r\n    background-color: bisque;\r\n}\r\n\r\np.capa{\r\n    text-align: center;\r\n    line-height: 150px;\r\n    margin:auto;\r\n    font-size: 10px\r\n}\r\n\r\n\r\nh2{\r\n    font-family: sans-serif;\r\n    font-weight: 700;\r\n    font-size: 21;\r\n    line-height: 1.3;\r\n}\r\n\r\n\r\n\r\np.nome{\r\n    font-family: sans-serif;\r\n    margin-top: 4px;\r\n    font-size: 9px;\r\n    line-height: 19px;\r\n}\r\n\r\np.autor{\r\n    font-family: sans-serif;\r\n    font-size: 8px;\r\n}\r\n\r\n\r\np.editora{\r\n    font-family: sans-serif;\r\n    color: #555;\r\n    font-size: 8px;\r\n    line-height: 1.5;\r\n}\r\n\r\np.data{\r\n    font-family: sans-serif;\r\n    font-size: 8px;\r\n}\r\n\r\ndiv.barra{\r\n    height: 100px;\r\n    background-color: #232f3e;\r\n    display: grid;\r\n    grid-template-columns: auto 100px\r\n}\r\n\r\np.Titulo{\r\n    margin-top: 0;\r\n    color: azure;\r\n    font-size: 80px;\r\n}\r\n\r\n\r\nbutton.carrinho{\r\n    margin-top: 50px;\r\n    background-color: coral;\r\n    text-align: center;\r\n    float: right;\r\n    height: 50px;\r\n    width: 100px;\r\n    cursor:pointer;\r\n    border:none;\r\n}\r\n\r\ndiv.contentCarrinho{\r\n    text-align: center;\r\n    background-color: rgb(252, 223, 214);\r\n    height: 250px;\r\n    margin-top: 100px;\r\n    visibility: hidden;\r\n    position: relative;\r\n    overflow-y: auto;\r\n}\r\n\r\ndiv.livro{\r\n    display: flex;\r\n    height: 291px;\r\n    margin-bottom: 10%;\r\n}\r\n\r\ndiv.botoes{\r\n    position: absolute;\r\n    align-self: flex-end;\r\n}\r\n\r\nbutton.descr{\r\n\r\n    border:none;\r\n    background-color: lightsteelblue;\r\n}\r\n\r\nbutton.add{\r\n\r\n    border: none;\r\n    background-color: coral;\r\n}\r\n\r\ndiv.contCarrinho{\r\n    font-size: 8px;\r\n    border-width: thin;\r\n    border-style: solid;\r\n    border-color: #232f3e;\r\n}\r\n\r\nbutton.deleteCont{\r\n    background-image: url("+t(r(1))+");\r\n    border: none;\r\n    height: 10px;\r\n    background-size: 10px;\r\n    background-color: rgb(252, 223, 214);\r\n    cursor: pointer;\r\n}\r\n\r\ndiv.modal{\r\n    top: 0%;\r\n    left:0%;\r\n    display: block;\r\n    position: fixed;\r\n    z-index: 2;\r\n    height: 100%;\r\n    width: 100%;\r\n    overflow: auto;\r\n    background-color: rgb(0,0,0); \r\n    background-color: rgba(0,0,0,0.4); \r\n}\r\n\r\ndiv.modalConteudo{\r\n    background-color: aquamarine;\r\n    top: 25%;\r\n    left:25%;\r\n    display: block;\r\n    position: fixed;\r\n    z-index: 2;\r\n    height: 50%;\r\n    width: 50%;\r\n    overflow: auto;\r\n    display: grid;\r\n    grid-template-columns: 50px auto 100px auto 50px;\r\n    border: solid #232f3e;\r\n}\r\n\r\ndiv.cardModal{\r\n    text-align: center;\r\n    grid-column-start: 3;\r\n}\r\n\r\nbutton.btnModal{\r\n    background-image: url("+t(r(1))+");\r\n    border: none;\r\n    height: 50px;\r\n    width:50px;\r\n    background-size: 50px;\r\n    background-color: rgb(0,0,0); \r\n    background-color: rgba(0,0,0,0.4); \r\n    cursor: pointer;\r\n    float: right;\r\n    grid-column-start: 5;\r\n}\r\n\r\ndiv.capaModal{\r\n    width: 100px;\r\n    height: 150px;\r\n    background-color: bisque;\r\n}",""])},function(e,n,r){e.exports=r.p+"42cf1bcecc4e24b43167ffa25e40a375.png"},function(e,n,r){var t=r(0);"string"==typeof t&&(t=[[e.i,t,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0},i=r(5)(t,o);t.locals&&(e.exports=t.locals),e.hot.accept(0,function(){var n=r(0);if("string"==typeof n&&(n=[[e.i,n,""]]),!function(e,n){var r,t=0;for(r in e){if(!n||e[r]!==n[r])return!1;t++}for(r in n)t--;return 0===t}(t.locals,n.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");i(n)}),e.hot.dispose(function(){i()})},function(e,n){e.exports=function(e){return"string"!=typeof e?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),/["'() \t\n]/.test(e)?'"'+e.replace(/"/g,'\\"').replace(/\n/g,"\\n")+'"':e)}},function(e,n){e.exports=function(e){var n=[];return n.toString=function(){return this.map(function(n){var r=function(e,n){var r=e[1]||"",t=e[3];if(!t)return r;if(n&&"function"==typeof btoa){var o=(a=t,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=t.sources.map(function(e){return"/*# sourceURL="+t.sourceRoot+e+" */"});return[r].concat(i).concat([o]).join("\n")}var a;return[r].join("\n")}(n,e);return n[2]?"@media "+n[2]+"{"+r+"}":r}).join("")},n.i=function(e,r){"string"==typeof e&&(e=[[null,e,""]]);for(var t={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(t[i]=!0)}for(o=0;o<e.length;o++){var a=e[o];"number"==typeof a[0]&&t[a[0]]||(r&&!a[2]?a[2]=r:r&&(a[2]="("+a[2]+") and ("+r+")"),n.push(a))}},n}},function(e,n,r){var t,o,i={},a=(t=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=t.apply(this,arguments)),o}),c=function(e){var n={};return function(e,r){if("function"==typeof e)return e();if(void 0===n[e]){var t=function(e,n){return n?n.querySelector(e):document.querySelector(e)}.call(this,e,r);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}}(),d=null,s=0,l=[],u=r(6);function p(e,n){for(var r=0;r<e.length;r++){var t=e[r],o=i[t.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](t.parts[a]);for(;a<t.parts.length;a++)o.parts.push(g(t.parts[a],n))}else{var c=[];for(a=0;a<t.parts.length;a++)c.push(g(t.parts[a],n));i[t.id]={id:t.id,refs:1,parts:c}}}}function f(e,n){for(var r=[],t={},o=0;o<e.length;o++){var i=e[o],a=n.base?i[0]+n.base:i[0],c={css:i[1],media:i[2],sourceMap:i[3]};t[a]?t[a].parts.push(c):r.push(t[a]={id:a,parts:[c]})}return r}function h(e,n){var r=c(e.insertInto);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var t=l[l.length-1];if("top"===e.insertAt)t?t.nextSibling?r.insertBefore(n,t.nextSibling):r.appendChild(n):r.insertBefore(n,r.firstChild),l.push(n);else if("bottom"===e.insertAt)r.appendChild(n);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=c(e.insertAt.before,r);r.insertBefore(n,o)}}function v(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var n=l.indexOf(e);n>=0&&l.splice(n,1)}function m(e){var n=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var t=function(){0;return r.nc}();t&&(e.attrs.nonce=t)}return b(n,e.attrs),h(e,n),n}function b(e,n){Object.keys(n).forEach(function(r){e.setAttribute(r,n[r])})}function g(e,n){var r,t,o,i;if(n.transform&&e.css){if(!(i="function"==typeof n.transform?n.transform(e.css):n.transform.default(e.css)))return function(){};e.css=i}if(n.singleton){var a=s++;r=d||(d=m(n)),t=w.bind(null,r,a,!1),o=w.bind(null,r,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(r=function(e){var n=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",b(n,e.attrs),h(e,n),n}(n),t=function(e,n,r){var t=r.css,o=r.sourceMap,i=void 0===n.convertToAbsoluteUrls&&o;(n.convertToAbsoluteUrls||i)&&(t=u(t));o&&(t+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([t],{type:"text/css"}),c=e.href;e.href=URL.createObjectURL(a),c&&URL.revokeObjectURL(c)}.bind(null,r,n),o=function(){v(r),r.href&&URL.revokeObjectURL(r.href)}):(r=m(n),t=function(e,n){var r=n.css,t=n.media;t&&e.setAttribute("media",t);if(e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}.bind(null,r),o=function(){v(r)});return t(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;t(e=n)}else o()}}e.exports=function(e,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(n=n||{}).attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=a()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var r=f(e,n);return p(r,n),function(e){for(var t=[],o=0;o<r.length;o++){var a=r[o];(c=i[a.id]).refs--,t.push(c)}e&&p(f(e,n),n);for(o=0;o<t.length;o++){var c;if(0===(c=t[o]).refs){for(var d=0;d<c.parts.length;d++)c.parts[d]();delete i[c.id]}}}};var y,x=(y=[],function(e,n){return y[e]=n,y.filter(Boolean).join("\n")});function w(e,n,r,t){var o=r?"":t.css;if(e.styleSheet)e.styleSheet.cssText=x(n,o);else{var i=document.createTextNode(o),a=e.childNodes;a[n]&&e.removeChild(a[n]),a.length?e.insertBefore(i,a[n]):e.appendChild(i)}}},function(e,n){e.exports=function(e){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var r=n.protocol+"//"+n.host,t=r+n.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,n){var o,i=n.trim().replace(/^"(.*)"$/,function(e,n){return n}).replace(/^'(.*)'$/,function(e,n){return n});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?r+i:t+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,n,r){"use strict";r.r(n);r(2);function t(e){var n="https://api.nytimes.com/svc/books/v3/lists.json?api-key=7a7846ce976e4df6ae218249bfb3a631&list="+e;var r,t,o=JSON.parse((r=n,(t=new XMLHttpRequest).open("GET",r,!1),t.send(null),t.responseText));function i(e,n,r,t){this.titulo=e,this.autor=n,this.editora=r,this.data=t}for(var a=[],c=0;c<15;c++){let e=o.results[c].book_details[0];a[c]=new i(e.title,e.author,e.publisher,o.results[c].published_date)}return a}function o(e,n){var r=document.createElement("div"),t="livro"+n;r.id=t,r.className="livro";e.appendChild(r),r.innerHTML="<div class='card'>\n        <div class='capa'>\n            <p class=\"capa\">Capa</p>\n        </div>\n        <p class=\"nome\"></p>\n        <p class=\"autor\"></p>\n        <p class=\"editora\"></p>\n        <p class=\"data\"></p></div>\n        <div class='botoes'>\n            <button class='descr'>Descr</button>\n            <button class='add'>Add</button>\n        </div>"}function i(e){let n=e.children[0].outerHTML,r=document.querySelector("div.element"),t=document.createElement("div"),o=document.createElement("div"),i=document.createElement("button");t.className="modal",o.className="modalConteudo",i.className="btnModal";let a=n;a=(a=(a=(a=(a=(a=a.replace(/"card"/,'"cardModal"')).replace(/"capa"/g,'"capaModal"')).replace(/"nome"/,'"nomeModal"')).replace(/"autor"/,'"autorModal"')).replace(/"editora"/,'"editoraModal"')).replace(/"data"/,'"dataModal"'),o.innerHTML=a,i.addEventListener("click",()=>{t.parentNode.removeChild(t)}),t.appendChild(o),o.appendChild(i),r.appendChild(t)}function a(e=0){let n=document.querySelectorAll("button.descr");!function(e,n,r,t){for(let o=t;o<e.length;o++)e[o].addEventListener("click",()=>{let e=document.createElement("div"),t=document.createElement("button");e.className="contCarrinho",t.className="deleteCont";let i=r[o].outerHTML;i=(i=i.replace(/<p class="nome">/g,"")).replace("</p>",""),e.innerHTML=i+"<br/>",e.appendChild(t),t.addEventListener("click",()=>{e.parentNode.removeChild(e)}),n.appendChild(e)})}(document.querySelectorAll("button.add"),document.querySelector("div.contentCarrinho"),document.querySelectorAll("p.nome"),e),function(e,n){for(let r=n;r<e.length;r++)e[r].addEventListener("click",()=>{i(e[r].parentNode.parentNode.parentNode.children[r])})}(n,e)}var c=e=>{const n=document.getElementById("formInsert")?document.getElementById("formInsert"):document.createElement("form");if(document.getElementById("formInsert"))n.remove();else{n.id="formInsert";let r="\n            <input type='text' class='nomeNovo'></input>\n            <input type='text' class='autorNovo'></input>\n            <input type='text' class='editoraNovo'></input>\n            <input type='date' class='dataNovo'></input>\n            <br/>\n        ",t=document.createElement("button");t.innerHTML="Enviar",t.className="buttonInserir",t.addEventListener("click",()=>{((e,n)=>{var r=e.childNodes,t=document.createElement("div"),o="livro"+r.length;t.id=o,t.className="livro";let c=`<div class='card'>\n    <div class='capa'>\n        <p class="capa">Capa</p>\n    </div>\n    <p class="nome">${n.children[0].value.toUpperCase()}</p>\n    <p class="autor">${n.children[1].value}</p>\n    <p class="editora">${n.children[2].value}</p>\n    <p class="data">${n.children[3].value}</p></div>\n    <div class='botoes'>\n        <button class='descr'>Descr</button>\n        <button class='add'>Add</button>\n    </div>\n    `;t.innerHTML=c,e.appendChild(t),a(r.length-1),e.children[r.length-1].children[0].addEventListener("click",()=>{i(e.children[r.length-1])})})(e,n)}),n.innerHTML=r,n.appendChild(t),e.previousSibling.previousSibling.children[0].appendChild(n)}};function d(e){let n=function(){var e,n,r=JSON.parse((e="https://api.nytimes.com/svc/books/v3/lists/names.json?api-key=7a7846ce976e4df6ae218249bfb3a631&list=",(n=new XMLHttpRequest).open("GET",e,!1),n.send(null),n.responseText));function t(e,n){this.titulo=e,this.nome=n}for(var o=[],i=0;i<15;i++){let e=r.results[i];o[i]=new t(e.list_name,e.list_name_encoded)}return o}();for(let d=0;d<4;d++){let s=document.createElement("div");s.id="categoria";let l=document.createElement("h2"),u=`${n[d].titulo}`;l.innerHTML=u;let p=document.createElement("hr"),f=document.createElement("button");f.className="btnInserir",f.innerHTML="Inserir Livro",f.addEventListener("click",()=>{c(f.parentNode.nextSibling.nextSibling)});let h=t(n[d].nome);e.appendChild(l),l.appendChild(f),e.appendChild(p);for(let e=0;e<15;e++)o(s,e),r=s.children[e],a=h[e],r.childNodes[0].childNodes[3].innerHTML=a.titulo,r.childNodes[0].childNodes[5].innerHTML=a.autor,r.childNodes[0].childNodes[7].innerHTML=a.editora,r.childNodes[0].childNodes[9].innerHTML=a.data,s.children[e].children[0].addEventListener("click",()=>{i(s.children[e])});e.appendChild(s)}var r,a}document.body.appendChild(function(){let e=document.createElement("div");e.className="element";let n=document.createElement("div"),r=document.createElement("div");return setTimeout(()=>void(document.querySelector("button.carrinho").onclick=function(){let e=document.querySelector("div.contentCarrinho");"visible"===e.style.visibility?e.style.visibility="hidden":(e.style.visibility="visible",e.style.zIndex="1")}),1e3),setTimeout(()=>a(),1e3),function(e){e.className="barra",e.innerHTML="\n            <p class='Titulo'>Caio Books</p>\n            <div class='canto'>\n                <button class='carrinho'>Carrinho</button>\n                <div class='contentCarrinho'></div>\n            </div>\n        "}(r),d(n),e.appendChild(r),e.appendChild(n),e}())}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,